generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  true
  false
  OS
}

enum Pages {
  profile
  officers
  ncinc
  calls
  reports
  forum
  control
}

model Marking {
  id                  Int @id @default(autoincrement()) @unique
  label               String @unique
  marking             String @unique
  pairedPatrolCrew    Boolean

  officers Officer[]
}

model Rank {
  id   Int @id @default(autoincrement())
  name String @unique
  icon String?

  officers Officer[]
}

model Shift {
  id  Int @id @default(autoincrement())
  
  officers Officer[]
}

model Permission {
  id Int @id @default(autoincrement())
  canActivateName  Pages
  get              Boolean
  create           Boolean?
  delete           Boolean?
  update           Boolean?
  selfUpdate       Boolean?

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])
}

// прописать массив рангов которые могут иметь эту роль
model Role {
  id Int @id @default(autoincrement())
  name String @unique
  permissions Permission[]

  officers Officer[]
}

model Officer {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  lastUpdate    DateTime  @default(now())
  badgeNumber   String    @unique
  location      String
  status        Status?
  markingNumber Int?      
  isHead        Boolean?  @default(false)

  shiftId       Int
  shift         Shift @relation(fields: [shiftId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  roleId        Int
  role          Role @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  rankId        Int
  rank          Rank @relation(fields: [rankId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  markingId     Int?
  marking       Marking? @relation(fields: [markingId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  token         String  @unique
}