generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  true
  false
  OS
}

enum Pages {
  panic
  profile
  officers
  ncinc
  calls
  reports
  forum
  control
}

model Marking {
  id                  Int @id @default(autoincrement()) @unique
  label               String @unique
  marking             String @unique
  pairedPatrolCrew    Boolean

  officers Officer[]
}

model Rank {
  id   Int @id @default(autoincrement())
  name String @unique
  icon String?

  officers Officer[]
}

model Shift {
  id  Int @id @default(autoincrement())
  
  officers Officer[]
}

model Permission {
  id Int @id @default(autoincrement())
  canActivateName  Pages
  get              Boolean
  create           Boolean?
  delete           Boolean?
  update           Boolean?
  selfUpdate       Boolean?

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])
}

// прописать массив рангов которые могут иметь эту роль
model Role {
  id Int @id @default(autoincrement())
  name String @unique
  permissions Permission[] 

  officers Officer[]
}

model Panic {
  id           Int @id @default(autoincrement())
  officerId    Int @unique
  lastUpdate   DateTime
  name         String
  badgeNumber  String
  location     String

  officer      Officer @relation(fields: [officerId], references: [id])
}

model Officer {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  lastUpdate    DateTime  @default(now())
  badgeNumber   String    @unique
  location      String
  status        Status?
  markingNumber Int?      
  isHead        Boolean?  @default(false)

  shiftId       Int
  shift         Shift @relation(fields: [shiftId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  roleId        Int
  role          Role @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  rankId        Int
  rank          Rank @relation(fields: [rankId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  markingId     Int?
  marking       Marking? @relation(fields: [markingId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  token         String  @unique

  panics Panic[]
}

enum CivilHistoryItemTypes {
  fine
  prisonTerm
  jailTerm
  deprDrivingLicense
  deprGunLicense
}

model CivilHistoryItem {
  id            Int @id @default(autoincrement()) @unique
  happened      DateTime @default(now())
  freed         DateTime? 
  description   String
  type          CivilHistoryItemTypes

  civilId       Int
  civil         Civil @relation(fields: [civilId], references: [id], onDelete: Cascade)
}

enum CarHistoryItemTypes {
  confiscated
  fined
  stoped
  selled
  wanted
}

enum WeaponHistoryItemTypes {
  confiscated
  used // использовано в преступлении
}

model CarHistoryItem {
  id            Int @id @default(autoincrement()) @unique
  happened      DateTime @default(now())
  freed         DateTime? 
  description   String
  type          CarHistoryItemTypes
  
  carId         Int
  car           Car @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model WeaponHistoryItem {
  id            Int @id @default(autoincrement()) @unique
  happened      DateTime @default(now())
  description   String
  type          WeaponHistoryItemTypes
  
  civilId       Int
  civil         Weapon @relation(fields: [civilId], references: [id], onDelete: Cascade)
}


model Car {
  id            Int @id @default(autoincrement()) @unique
  brand         String
  plate         String
  history       CarHistoryItem[]
  color         String?

  civilId       Int
  civil         Civil @relation(fields: [civilId], references: [id], onDelete: Cascade)
}

model Weapon {
  id            Int @id @default(autoincrement()) @unique
  serial        String
  brand         String
  history       WeaponHistoryItem[]
  
  civilId       Int
  civil         Civil @relation(fields: [civilId], references: [id], onDelete: Cascade)
}

model Civil {
  id             Int @id @default(autoincrement()) @unique
  name           String @unique
  idCard         String
  gunLicense     Boolean
  drivingLicense Boolean
  workPlace      String

  history       CivilHistoryItem[]

  cars          Car[]
  weapons       Weapon[]
}